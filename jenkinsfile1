node {
        def REPOSITORY = params.REPOSITORY
        def IMAGE_NAME = params.IMAGE_NAME
        def PORT = params.PORT
        def USER_NAME = params.USER_NAME
        def PASSWORD = params.PASSWORD
  stage ('checkout'){
           git branch: 'main', credentialsId: 'gitcredentials', url: 'https://github.com/Anusha0503/docker-1.git'
 
         }
   stage ('build'){ 
        withMaven(globalMavenSettingsConfig: '', jdk: 'java', maven: 'maven', mavenSettingsConfig: '', traceability: true) {
        sh 'mvn clean package'
                  }
              }
   stage ('docker build image') {
        sh " pwd "
        sh " ls "
        sh " docker build  -t dockersampleimage ."
        
                       }
     
     stage ('docker tag&Push image'){
               sh " docker login https://anusha6.jfrog.io -u anusha6 -p Welcome@123  "
               sh " docker tag dockersampleimage:latest anusha6.jfrog.io/docker-1/springboot1:v5 "
               sh " docker push anusha6.jfrog.io/docker-1/springboot1:v5"
               sh " docker logout" 
               sh " docker login -u mydocker1405 -p Password@123 "
               sh " docker tag dockersampleimage:latest mydocker1405/springboot1:v35 "
               sh  " docker push mydocker1405/springboot1:v35 "
     }
    


    /*  stage ('deploy'){
          def dockerRun = "docker run -d -p $PORT:8000 $REPOSITORY/$IMAGE_NAME:$BUILD_NUMBER"
          sshagent(['webserver1id']) {

            sh" ssh -o StrictHostKeyChecking=no ubuntu@54.167.220.76 ${dockerRun} "
            }
      }*/
      stage (' deploy to k8s ') {
        sshagent(['kubernetes_Master_pemfile']) {
              sh " scp -o stricthostkeychecking=no deployment.yaml ubuntu@54.174.245.243:/home/ubuntu"
              sh " scp -o stricthostkeychecking=no service.yaml ubuntu@54.174.245.243:/home/ubuntu"        
              sh " ssh ubuntu@54.174.245.243  kubectl apply -f deployment.yaml"
              sh " ssh ubuntu@54.174.245.243  kubectl apply -f service.yaml"
            }
        
      }
   
} 
   
  
